/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 13:23:08
 */
import ts from 'typescript';
export function getDisplayName(node) {
    var parent = node.parent;
    while (parent) {
        if (ts.isBinaryExpression(parent) && ts.isIdentifier(parent.left)) {
            return parent.left.escapedText;
        }
        if (ts.isVariableDeclaration(parent) && ts.isIdentifier(parent.name)) {
            return parent.name.escapedText;
        }
        if (ts.isPropertyAssignment(parent)) {
            if (ts.isStringLiteral(parent.name)) {
                return parent.name.text;
            }
            if (ts.isIdentifier(parent.name)) {
                return parent.name.escapedText;
            }
        }
        parent = parent.parent;
    }
    return void 0;
}
export function withConfig(state, node) {
    var left = ts.isCallExpression(node)
        ? node.expression
        : ts.isTaggedTemplateExpression(node)
            ? node.tag
            : false;
    if (!left) {
        return node;
    }
    var properties = [];
    if (state.setComponentId) {
        properties.push(ts.createPropertyAssignment('componentId', ts.createStringLiteral('sc-' + state.getId())));
    }
    if (state.setDisplayName) {
        var displayName = getDisplayName(left);
        if (displayName) {
            properties.push(ts.factory.createPropertyAssignment('displayName', ts.factory.createStringLiteral(displayName)));
        }
    }
    var newLeft = ts.factory.createCallExpression(ts.factory.createPropertyAccessExpression(left, ts.factory.createIdentifier('withConfig')), void 0, [ts.factory.createObjectLiteralExpression(properties, false)]);
    return ts.isCallExpression(node)
        ? ts.factory.createCallExpression(newLeft, node.typeArguments, node.arguments)
        : ts.isTaggedTemplateExpression(node)
            ? ts.factory.createTaggedTemplateExpression(newLeft, node.typeArguments, node.template)
            : node;
}
//# sourceMappingURL=withConfig.js.map