"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 17:52:46
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const murmurhash_1 = tslib_1.__importDefault(require("murmurhash"));
const path_1 = tslib_1.__importDefault(require("path"));
const numberFormat_1 = require("./numberFormat");
class State {
    constructor({ setDisplayName = true, setComponentId = true, minify = true, packageName, context, customCssTags = [], cssTags = ['keyframes', 'css', 'injectGlobal', 'createGlobalStyle'], }) {
        const cwd = process.cwd();
        this.setComponentId = setComponentId;
        this.setDisplayName = setDisplayName;
        this.minify = minify;
        this.customCssTags = customCssTags;
        this.cssTags = cssTags;
        this.cssTagsRecord = new Set(cssTags.concat(customCssTags));
        this.context = context ? path_1.default.resolve(context) : cwd;
        this.fileHash = '';
        this.filename = '';
        if (!packageName) {
            const contextFile = path_1.default.join(this.context, 'package.json');
            const cwdFile = path_1.default.join(cwd, 'package.json');
            const name = fs_1.default.existsSync(contextFile)
                ? require(contextFile).name
                : fs_1.default.existsSync(cwdFile)
                    ? require(cwdFile).name
                    : void 0;
            this.packageName = name || path_1.default.basename(this.context);
        }
        else {
            this.packageName = packageName;
        }
        this.files = {};
    }
    setFile(filename) {
        this.filename = filename;
        this.fileHash = '';
    }
    getId() {
        this.fileHash =
            this.fileHash ||
                numberFormat_1.itos(murmurhash_1.default(path_1.default.join(this.packageName, path_1.default.relative(this.context, this.filename))));
        if (!this.files[this.fileHash]) {
            this.files[this.fileHash] = 1;
            return this.fileHash;
        }
        else {
            return this.fileHash + '-' + this.files[this.fileHash]++;
        }
    }
}
exports.State = State;
//# sourceMappingURL=State.js.map