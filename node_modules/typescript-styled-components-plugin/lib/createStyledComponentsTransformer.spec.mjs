/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 13:07:13
 */
import { __values } from "tslib";
import murmurhash from 'murmurhash';
import ts, { ModuleKind, ScriptTarget } from 'typescript';
import { createStyledComponentsTransformer } from './createStyledComponentsTransformer';
import { itos } from './numberFormat';
var filename = '/root/src/cases.tsx';
var context = '/root';
var packageName = 'test';
var fileHash = "sc-" + itos(murmurhash("test/src/cases.tsx"));
var headLine = '/** @internal */\n';
var testCases = [
    {
        name: 'tagged tag',
        input: "var Foo = styled.div``",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'object tag',
        input: "var Foo = styled.div({})",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'tagged attrs tag',
        input: "var Foo = styled.div.attrs({})``",
        output: "var Foo = styled.div.attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'object attrs tag',
        input: "var Foo = styled.div.attrs({})({})",
        output: "var Foo = styled.div.attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'cast props tagged tag',
        input: "var Foo = styled.div<Foo>``",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'cast props object tag',
        input: "var Foo = styled.div<Foo>({})",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'cast props tagged attrs tag',
        input: "var Foo = styled.div.attrs({})<Foo>``",
        output: "var Foo = styled.div.attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'cast props object attrs tag',
        input: "var Foo = styled.div.attrs({})<Foo>({})",
        output: "var Foo = styled.div.attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'tagged component',
        input: "var Foo = styled(Foo)``",
        output: "var Foo = styled(Foo).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'object component',
        input: "var Foo = styled(Foo)({})",
        output: "var Foo = styled(Foo).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'tagged attrs component',
        input: "var Foo = styled(Foo).attrs({})``",
        output: "var Foo = styled(Foo).attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'object attrs component',
        input: "var Foo = styled(Foo).attrs({})({})",
        output: "var Foo = styled(Foo).attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'cast props tagged component',
        input: "var Foo = styled(Foo)<Foo>``",
        output: "var Foo = styled(Foo).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'cast props object component',
        input: "var Foo = styled(Foo)<Foo>({})",
        output: "var Foo = styled(Foo).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'cast props tagged attrs component',
        input: "var Foo = styled(Foo).attrs({})<Foo>``",
        output: "var Foo = styled(Foo).attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'cast props object attrs component',
        input: "var Foo = styled(Foo).attrs({})<Foo>({})",
        output: "var Foo = styled(Foo).attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'cast props object cast attrs component',
        input: "var Foo = styled(Foo).attrs<Foo>({})<Foo>({})",
        output: "var Foo = styled(Foo).attrs({}).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" })({});",
    },
    {
        name: 'cast tag',
        input: "var Foo = (styled.div as any as Foo)``",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'cast component',
        input: "var Foo = (styled(Foo) as any as Foo)``",
        output: "var Foo = styled(Foo).withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'cast top level',
        input: "var Foo = ((styled.div as any as Foo)`` as any as Foo)",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) ``;",
    },
    {
        name: 'minify single string',
        input: "var Foo = styled.div`\n      foo: \"\\\\n bar\\n\"\n    `\n    ",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) `foo:\"\\\\n bar \"`;",
    },
    {
        name: 'minify multiple spans',
        input: "var Foo = styled.div`\n      p1: \"\\\\n bar\\n\";\n      p2: ${\"p2\"};\n      p3: ${\"p3\"}\n      p4: \"\"\n    `\n    ",
        output: "var Foo = styled.div.withConfig({ componentId: \"" + fileHash + "\", displayName: \"Foo\" }) `p1:\"\\\\n bar \";p2:${\"p2\"};p3:${\"p3\"} p4:\"\"`;",
    },
    {
        name: 'css tags',
        input: "css`\n    foo: bar;\n    bar: foo;\n    `;keyframes`\n    foo: bar;\n    bar: foo;\n    `;createGlobalStyle`\n    foo: bar;\n    bar: foo;\n    `;injectGlobal`\n    foo: bar;\n    bar: foo; `;other` foo: bar; `",
        output: "css `foo:bar;bar:foo;`;\nkeyframes `foo:bar;bar:foo;`;\ncreateGlobalStyle `foo:bar;bar:foo;`;\ninjectGlobal `foo:bar;bar:foo;`;\nother ` foo: bar; `;",
    },
    {
        name: 'minify comments',
        input: "css`\n    // comment\n    // ${\"span in comment\"}\n    // this should be removed\n    title: \"\";\n    value: ${\"value\"};\n    second: \"\";\n    // second comment\n    // no span\n    third: ${\"third\"};\n    /* comment block\n    value: ${\"block comment\"};\n    */\n    forth: ${\"forth\"};\n    end: \"end with space\";\n    `",
        output: "css `title:\"\";value:${\"value\"};second:\"\";third:${\"third\"};forth:${\"forth\"};end:\"end with space\";`;",
    },
    {
        name: 'minify as single span',
        input: "css`\n    // comment 1\n    // comment ${comment}\n    title: value;\n    // comment ${3}\n    title: value;\n    `;css`\n    // comment ${1}\n    title: value;\n    `;css`\n    title: value;\n    // comment: ${2}\n    `",
        output: "css `title:value;title:value;`;\ncss `title:value;`;\ncss `title:value;`;",
    },
];
describe('createStyledComponentsTransformer', function () {
    var e_1, _a;
    var _loop_1 = function (item) {
        it("should transform - " + item.name, function () {
            var result = ts.transpileModule(headLine + item.input, {
                fileName: filename,
                compilerOptions: {
                    target: ScriptTarget.ESNext,
                    module: ModuleKind.ESNext,
                    importHelpers: true,
                },
                transformers: {
                    before: [
                        createStyledComponentsTransformer(void 0, {
                            setComponentId: true,
                            setDisplayName: true,
                            minify: true,
                            packageName: packageName,
                            context: context,
                        }),
                    ],
                },
            });
            expect(result.outputText.split(headLine)[1].trim()).toBe(item.output);
        });
    };
    try {
        for (var testCases_1 = __values(testCases), testCases_1_1 = testCases_1.next(); !testCases_1_1.done; testCases_1_1 = testCases_1.next()) {
            var item = testCases_1_1.value;
            _loop_1(item);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (testCases_1_1 && !testCases_1_1.done && (_a = testCases_1.return)) _a.call(testCases_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=createStyledComponentsTransformer.spec.js.map