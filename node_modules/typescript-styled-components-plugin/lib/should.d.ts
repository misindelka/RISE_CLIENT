/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 13:16:38
 */
import ts from 'typescript';
import { State } from './State';
/**
 * minify template, process:
 *    styled(Foo)({}), styled(Foo)``, styled.tag({}), styled.div``
 *    keyframes``, css``, createGlobalStyle``, injectGlobal``
 * @param state
 * @param node
 */
export declare function shouldMinifyNode(state: State, node: ts.Node): node is ts.TaggedTemplateExpression;
export declare function getRealExpression(node: ts.Node): ts.Node;
/**
 * withConfig just process
 *    styled(Foo)({}), styled(Foo)``, styled.tag({}), styled.div``
 *    styled(Foo).attrs()``, styled.div.attrs()``
 *    check right: isTaggedTemplateExpression, isCallExpression
 *    the left isCallExpression, isPropertyAccess
 *    the left isIdentifier & 'styled'
 * probable type cast:
 *    (styled(Foo) as Bar), (styled.div as Bar)
 *    styled(Foo)<Bar>``, styled.div<Bar>``
 *    (styled(Foo)``) as Bar, (styled.div``) as Bar
 * @param state
 * @param node
 */
export declare function shouldWithConfig(state: State, node: ts.Node): boolean;
