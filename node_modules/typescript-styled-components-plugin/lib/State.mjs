/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 17:52:46
 */
import fs from 'fs';
import murmurhash from 'murmurhash';
import path from 'path';
import { itos } from './numberFormat';
var State = /** @class */ (function () {
    function State(_a) {
        var _b = _a.setDisplayName, setDisplayName = _b === void 0 ? true : _b, _c = _a.setComponentId, setComponentId = _c === void 0 ? true : _c, _d = _a.minify, minify = _d === void 0 ? true : _d, packageName = _a.packageName, context = _a.context, _e = _a.customCssTags, customCssTags = _e === void 0 ? [] : _e, _f = _a.cssTags, cssTags = _f === void 0 ? ['keyframes', 'css', 'injectGlobal', 'createGlobalStyle'] : _f;
        var cwd = process.cwd();
        this.setComponentId = setComponentId;
        this.setDisplayName = setDisplayName;
        this.minify = minify;
        this.customCssTags = customCssTags;
        this.cssTags = cssTags;
        this.cssTagsRecord = new Set(cssTags.concat(customCssTags));
        this.context = context ? path.resolve(context) : cwd;
        this.fileHash = '';
        this.filename = '';
        if (!packageName) {
            var contextFile = path.join(this.context, 'package.json');
            var cwdFile = path.join(cwd, 'package.json');
            var name_1 = fs.existsSync(contextFile)
                ? require(contextFile).name
                : fs.existsSync(cwdFile)
                    ? require(cwdFile).name
                    : void 0;
            this.packageName = name_1 || path.basename(this.context);
        }
        else {
            this.packageName = packageName;
        }
        this.files = {};
    }
    State.prototype.setFile = function (filename) {
        this.filename = filename;
        this.fileHash = '';
    };
    State.prototype.getId = function () {
        this.fileHash =
            this.fileHash ||
                itos(murmurhash(path.join(this.packageName, path.relative(this.context, this.filename))));
        if (!this.files[this.fileHash]) {
            this.files[this.fileHash] = 1;
            return this.fileHash;
        }
        else {
            return this.fileHash + '-' + this.files[this.fileHash]++;
        }
    };
    return State;
}());
export { State };
//# sourceMappingURL=State.js.map