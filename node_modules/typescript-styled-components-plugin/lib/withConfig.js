"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 13:23:08
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.withConfig = exports.getDisplayName = void 0;
const tslib_1 = require("tslib");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
function getDisplayName(node) {
    let parent = node.parent;
    while (parent) {
        if (typescript_1.default.isBinaryExpression(parent) && typescript_1.default.isIdentifier(parent.left)) {
            return parent.left.escapedText;
        }
        if (typescript_1.default.isVariableDeclaration(parent) && typescript_1.default.isIdentifier(parent.name)) {
            return parent.name.escapedText;
        }
        if (typescript_1.default.isPropertyAssignment(parent)) {
            if (typescript_1.default.isStringLiteral(parent.name)) {
                return parent.name.text;
            }
            if (typescript_1.default.isIdentifier(parent.name)) {
                return parent.name.escapedText;
            }
        }
        parent = parent.parent;
    }
    return void 0;
}
exports.getDisplayName = getDisplayName;
function withConfig(state, node) {
    const left = typescript_1.default.isCallExpression(node)
        ? node.expression
        : typescript_1.default.isTaggedTemplateExpression(node)
            ? node.tag
            : false;
    if (!left) {
        return node;
    }
    const properties = [];
    if (state.setComponentId) {
        properties.push(typescript_1.default.createPropertyAssignment('componentId', typescript_1.default.createStringLiteral('sc-' + state.getId())));
    }
    if (state.setDisplayName) {
        const displayName = getDisplayName(left);
        if (displayName) {
            properties.push(typescript_1.default.factory.createPropertyAssignment('displayName', typescript_1.default.factory.createStringLiteral(displayName)));
        }
    }
    const newLeft = typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(left, typescript_1.default.factory.createIdentifier('withConfig')), void 0, [typescript_1.default.factory.createObjectLiteralExpression(properties, false)]);
    return typescript_1.default.isCallExpression(node)
        ? typescript_1.default.factory.createCallExpression(newLeft, node.typeArguments, node.arguments)
        : typescript_1.default.isTaggedTemplateExpression(node)
            ? typescript_1.default.factory.createTaggedTemplateExpression(newLeft, node.typeArguments, node.template)
            : node;
}
exports.withConfig = withConfig;
//# sourceMappingURL=withConfig.js.map