"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-29 13:16:38
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldWithConfig = exports.getRealExpression = exports.shouldMinifyNode = void 0;
const tslib_1 = require("tslib");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
/**
 * minify template, process:
 *    styled(Foo)({}), styled(Foo)``, styled.tag({}), styled.div``
 *    keyframes``, css``, createGlobalStyle``, injectGlobal``
 * @param state
 * @param node
 */
function shouldMinifyNode(state, node) {
    return (state.minify &&
        typescript_1.default.isTaggedTemplateExpression(node) &&
        (shouldWithConfig(state, node) ||
            (typescript_1.default.isIdentifier(node.tag) &&
                state.cssTagsRecord.has(node.tag.escapedText))));
}
exports.shouldMinifyNode = shouldMinifyNode;
function getRealExpression(node) {
    return typescript_1.default.isParenthesizedExpression(node)
        ? getRealExpression(node.expression)
        : typescript_1.default.isAsExpression(node)
            ? getRealExpression(node.expression)
            : node;
}
exports.getRealExpression = getRealExpression;
/**
 * withConfig just process
 *    styled(Foo)({}), styled(Foo)``, styled.tag({}), styled.div``
 *    styled(Foo).attrs()``, styled.div.attrs()``
 *    check right: isTaggedTemplateExpression, isCallExpression
 *    the left isCallExpression, isPropertyAccess
 *    the left isIdentifier & 'styled'
 * probable type cast:
 *    (styled(Foo) as Bar), (styled.div as Bar)
 *    styled(Foo)<Bar>``, styled.div<Bar>``
 *    (styled(Foo)``) as Bar, (styled.div``) as Bar
 * @param state
 * @param node
 */
function shouldWithConfig(state, node) {
    if (!state.setDisplayName && !state.setComponentId) {
        return false;
    }
    let middle = typescript_1.default.isCallExpression(node)
        ? getRealExpression(node.expression)
        : typescript_1.default.isTaggedTemplateExpression(node)
            ? getRealExpression(node.tag)
            : false;
    if (middle &&
        typescript_1.default.isCallExpression(middle) &&
        typescript_1.default.isPropertyAccessExpression(middle.expression) &&
        middle.expression.name.escapedText === 'attrs') {
        middle = getRealExpression(middle.expression.expression);
    }
    const left = middle &&
        (typescript_1.default.isCallExpression(middle) || typescript_1.default.isPropertyAccessExpression(middle))
        ? getRealExpression(middle.expression)
        : false;
    return left && typescript_1.default.isIdentifier(left) && left.escapedText === 'styled';
}
exports.shouldWithConfig = shouldWithConfig;
//# sourceMappingURL=should.js.map